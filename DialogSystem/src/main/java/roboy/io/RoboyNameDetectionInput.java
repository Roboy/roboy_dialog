package roboy.io;

import java.io.IOException;

import roboy.linguistics.Linguistics;
import roboy.util.Maps;
//----packages for speech to text
import edu.cmu.sphinx.api.*;
/*package edu.cmu.sphinx.demo.dialog;
*/
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Line;
import javax.sound.sampled.Mixer;
import javax.sound.sampled.TargetDataLine;
//----

public class RoboyNameDetectionInput implements InputDevice{
	//'link' to the object of Recognizer for correct stopping before 
	//deletion of the RoboyNameDetectorInput object
	protected LiveSpeechRecognizer recog_copy;
	
	//constructor which initialises recognition
	RoboyNameDetectionInput()
	{
		//configure input sound stream reader
		Mixer.Info[] mixerInfo;
		mixerInfo = AudioSystem.getMixerInfo();
		Line.Info targetDLInfo = new Line.Info(TargetDataLine.class);

		/* uncomment to check the number of input port for necessary device
		for(int i = 0; i < mixerInfo.length; i++)
		{
			Mixer currentMixer = AudioSystem.getMixer(mixerInfo[i]);
			if( currentMixer.isLineSupported(targetDLInfo) )
				System.out.println( mixerInfo[i].getName()+'\n' );
		}
		*/
		JavaSoundAudioIO aio = new JavaSoundAudioIO();
		aio.selectMixer(1);//number of port on my PC!
		//configure sphinx for 'Roboy' itself and phrases with it
		Configuration configuration = new Configuration();
		//contains phonetic model - how all words to recognize may be pronounced
		//9462 - name automatically generated by online tool that prepares files for sphinx 
		//can be any other, but hard to change everywhere each time
		configuration.setDictionaryPath("src//edu//cmu//sphinx//models//9462//9462.dic");
		configuration.setLanguageModelPath("src//edu//cmu//sphinx//models//9462//9462.lm");
		//native sphinx file - NN for matching words in phrases
		configuration.setAcousticModelPath("src//edu//cmu//sphinx//models//en-us//en-us");
		LiveSpeechRecognizer recognizer = new LiveSpeechRecognizer(configuration);
		recognizer.startRecognition(true);
		//create external 'link' to the object of recognizer to be able to stop it correctly
		//before deletion of the RoboyNameDetectorInput object
		recog_copy = recognizer;
	}
	//function for correct stopping recognition
	public void stopListening(){
		 recog_copy.stopRecognition();
		 recog_copy = null;
	}
	
	@Override
	public Input listen() throws InterruptedException, IOException {
		//get a string that was recognized
		String utterance = recog_copy.getResult().getHypothesis();
		if ( utterance.contains("ROBOY") ){
			return new Input(null,Maps.stringObjectMap(Linguistics.ROBOYDETECTED,true));
		}
		else {
			return new Input(null);
		}
	}
}
